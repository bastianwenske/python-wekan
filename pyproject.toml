[project]
name = "python-wekan"
version = "0.3.1"
description = "Python client for interacting with the WeKanÂ® REST-API with optional CLI interface"
readme = "README.md"
license = { text = "BSD 3-Clause License" }
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
authors = [
    { name = "Bastian Wenske" },
]
keywords = ["wekan", "kanban", "api", "rest", "client", "cli"]
dependencies = [
    "certifi>=2024.7.4",
    "charset-normalizer>=3.3.2",
    "idna>=3.7",
    "python-dateutil>=2.9.0",
    "requests>=2.32.0",
    "six>=1.16.0",
    "urllib3>=2.2.0",
]

[project.optional-dependencies]
cli = [
    "typer>=0.9.0",
    "rich>=10.0.0",
    "pydantic>=1.8.0",
]
dev = [
    # Testing
    "pytest>=8.2.0",
    "pytest-cov>=5.0.0",
    "coverage[toml]>=7.5.0",
    "faker>=25.0.0",
    "unittest-xml-reporting>=3.2.0",

    # Code quality
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "ruff>=0.1.0",

    # Security
    "detect-secrets>=1.5.0",

    # Pre-commit hooks
    "pre-commit>=3.6.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
]

[project.urls]
homepage = "https://github.com/bastianwenske/python-wekan"
repository = "https://github.com/bastianwenske/python-wekan"
documentation = "https://github.com/bastianwenske/python-wekan#readme"
"Bug Tracker" = "https://github.com/bastianwenske/python-wekan/issues"

[project.scripts]
wekan = "wekan.cli.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["wekan"]

[tool.hatch.build.targets.sdist]
include = [
    "/wekan",
    "/tests",
    "/README.md",
    "/LICENSE",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "cli: marks tests as CLI tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["wekan"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linter configuration
[tool.bandit]
skips = ["B101", "B601"]
exclude_dirs = ["tests", "venv", ".venv"]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None`
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

# Pyright configuration
[tool.pyright]
pythonVersion = "3.9"
reportMissingImports = true
reportMissingTypeStubs = false

[dependency-groups]
dev = [
    "flake8>=7.3.0",
    "pytest>=8.4.1",
]
